Funci贸n leer de StackOverflow
(defun my-copy-file (from-file to-file)
  (with-open-file (input-stream from-file
                :direction :input
                :element-type '(unsigned-byte 8))
    (with-open-file (output-stream to-file
                   :direction :output
                   :if-exists :supersede
                   :if-does-not-exist :create
                   :element-type '(unsigned-byte 8))
      (let ((buf (make-array 4096 :element-type (stream-element-type input-stream))))
    (loop for pos = (read-sequence buf input-stream)
       while (plusp pos)
       do (write-sequence buf output-stream :end pos))))))

Funci贸n leer implementada
(DEFUN leer()
	(SETQ l NIL)
	(LOOP
		(UNLESS (NOT (NULL l)) () (SETQ LST1 (LIST (READ l)(READ l)(READ l)(READ l)(READ l)(READ l)(READ l)(READ l)(READ l))
									LST2 (LIST (READ l)(READ l)(READ l)(READ l)(READ l)(READ l)(READ l)(READ l)(READ l))
									eb (LST1)
									em (LST2)
									n-ini (APPEND '(1 NIL 0 manhattan(eb) NIL)(LIST eb)))
									(CLOSE l)(RETURN (verifica eb em))) ;la funci贸n verifica checa si son iguales el estado base al estado meta y si no empieza a resolver
									(SETQ l(OPEN "/Users/Christian/Documents/Processing/sketch_8puzzleGUI/lst.txt" :if-does-not-exist nil))))

Funci贸n escribir implementada ;(OPEN "/Users/Christian/Documents/Processing/sketch_8puzzleGUI/sol.txt" :direction :output)
(DEFUN escribir(lst)
	(SETQ i 0 l lst)
	(SETQ r(OPEN "/Users/Christian/Documents/Processing/sketch_8puzzleGUI/res.txt" :direction :output))
	(LOOP WHILE (< i (LENGTH lst))
		DO(WRITE-LINE (WRITE-TO-STRING(POP l)) r)(INCF i))
		(CLOSE r))
	